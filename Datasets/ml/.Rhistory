caret_fit <- train(train_data, train_label, method = "knn", trControl = trainControl(method="cv",number = 9))
#plot accuracy and k
plot(caret_fit)
#predict labels
prediction<- predict(caret_fit, newdata = test_data)
#check the prediction result
summary(prediction)
#tablulatize prediction vs observed value
tb <- table(prediction,test_label)
tb
library(ggplot2)
library(plyr)
library(dplyr)
library(splines)
library(survival)
library(reshape)
library(lattice)
library(stringr)
library(plotly)
rm(list=ls())
setwd("/Volumes/data/robodata/Shijie/ML/NSCLC-H23")
surv.data1=read.csv("cell_data-H23-1.csv")
surv.data2=read.csv("cell_data-H23-2.csv")
surv.data3=read.csv("cell_data-H23-3.csv")
#surv.data=rbind(surv.data1,surv.data2)
platelayout=read.csv("Plate_Layout.csv")
platelayout2=read.csv("Plate_Layout_2.csv")
#colnames(platelayout)[colnames(platelayout)=='?..Sci_WellID']<-"Sci_WellID"
surv.data1$plate=paste("1")
surv.data2$plate=paste("2")
surv.data3$plate=paste("3")
#Get the subset of neurons at timepoint 1
#surv.data.t0 <- subset(surv.data,Timepoint==0)
surv.data1$plate_timepoint_well_neuron=paste(surv.data1$plate,surv.data1$Timepoint,surv.data1$Sci_WellID,surv.data1$ObjectLabelsFound,sep="_")
surv.data2$plate_timepoint_well_neuron=paste(surv.data2$plate,surv.data2$Timepoint,surv.data2$Sci_WellID,surv.data2$ObjectLabelsFound,sep="_")
surv.data3$plate_timepoint_well_neuron=paste(surv.data3$plate,surv.data3$Timepoint,surv.data3$Sci_WellID,surv.data3$ObjectLabelsFound,sep="_")
surv.data=rbind(surv.data1,surv.data2,surv.data3)
#surv.data1$timepoint_well_neuron=paste(surv.data1$Timepoint,surv.data1$Sci_WellID,surv.data1$ObjectLabelsFound,sep="_")
#subset RFP and FITC
FITC<-subset(surv.data,MeasurementTag=="Epi-GFP16")
RFP<- subset(surv.data,MeasurementTag=="Epi-RFP16")
#renaming GFP PixelIntensityMean to GFPPixelIntensityMean
colnames(FITC)[colnames(FITC)=='PixelIntensityMean']<-"GFPPixelIntensityMean"
FITC2<-FITC[,c("plate_timepoint_well_neuron","GFPPixelIntensityMean")]
#merge RFP pixel intensities with FITC pixel intensity information
x2<-merge(FITC2,RFP,by="plate_timepoint_well_neuron")
x3=merge(x2, platelayout, by="Sci_WellID")
#For RGEDi-P2a-EGFP
x3$GEDIRatio<-((x3$PixelIntensityMean/x3$GFPPixelIntensityMean))
#For GCamp/mApple or GC150
#x3$greenred<-((x3$GFPPixelIntensityMean)/(x3$PixelIntensityMean))
#x3$ratio=ifelse(x3$GEDI=="pGW1-RGEDI-P2a-eGFP",x3$redgreen,x3$greenred)
x3$Time=paste("T",x3$Timepoint, sep="")
x3$TP=paste(x3$Timepoint,"-0", sep="")
#RGEDI=subset(x3, x3$GEDI=="pGW1-RGEDI-P2a-eGFP")
#RGEDI=subset(RGEDI, RGEDI$Timepoint<3)
x3$Status=ifelse(x3$GEDIRatio<0.1, "Live", (ifelse(x3$GEDIRatio>0.2,"Dead","Intermediate")))
write.csv(surv.data,"All_H23.csv")
#RGEDIH23=subset(RGEDI, RGEDI$Cell_line=="H23")
#RGEDIH2310=subset(x3, x3$Condition=="10% NaAz")
DS1ap <- ggplot(data=x3, aes(y=GEDIRatio, x=Timepoint, colour=Status))+
# scale_colour_gradient(limits=c(0, 10000), low="red", high="blue")+
geom_jitter(size=0.01)+
ylim(0,0.8)+
geom_hline(yintercept=0.2, linetype="dashed", color = "green")+
geom_hline(yintercept=0.1, linetype="dashed", color = "blue")+
#facet_wrap(~Timepoint)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"),
panel.background = element_rect(fill=NA, colour = "white"),
legend.background = element_rect(fill='white'))
DS1ap
# Declare cells as dead if ratio is greater than threshold
#RGEDIH2310<-within(RGEDIH2310, {Status = ifelse(RGEDIH23$stdPixelIntMean>0.03,"Dead","Live")})
x3$SortID=paste(x3$Sci_PlateID,x3$Time,x3$TP,x3$Sci_WellID, "0","Epi-GFP16","0.0","0","1.0","BGs","MN","ALIGNED",x3$ObjectLabelsFound, sep = "_")
x3$SortID2=paste(x3$SortID,".tif", sep = "")
ListDead=subset(x3,x3$Status=="Dead")
ListIntermediate=subset(x3,x3$Status=="Intermediate")
ListLive=subset(x3,x3$Status=="Live")
x3_1=subset(x3,x3$plate=="1")
x3_2=subset(x3,x3$plate=="2")
x3_3=subset(x3,x3$plate=="3")
ListDead_1=subset(x3_1,x3_1$Status=="Dead")
ListIntermediate_1=subset(x3_1,x3_1$Status=="Intermediate")
ListLive_1=subset(x3_1,x3_1$Status=="Live")
ListDead_2=subset(x3_2,x3_2$Status=="Dead")
ListIntermediate_2=subset(x3_2,x3_2$Status=="Intermediate")
ListLive_2=subset(x3_2,x3_2$Status=="Live")
ListDead_3=subset(x3_3,x3_3$Status=="Dead")
ListIntermediate_3=subset(x3_3,x3_3$Status=="Intermediate")
ListLive_3=subset(x3_3,x3_3$Status=="Live")
fromFolder1<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-1-SIFT/ObjectCrops"
fromFolder2<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-2-SIFT/ObjectCrops"
fromFolder3<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-3-SIFT/ObjectCrops"
t_1=paste(fromFolder1,ListLive_1$Sci_WellID, ListLive_1$SortID2, sep="\\")
print(head(t_1))
View(x3)
View(surv.data)
t_1=paste(fromFolder1,ListLive_1$Sci_WellID, ListLive_1$SortID2, sep="/")
print(head(t_1))
View(surv.data2)
x3$SortID=paste(x3$Sci_PlateID,x3$Time,x3$TP,x3$Sci_WellID, "0","Epi-GFP16","0","0","1","BGs","MN", x3$ObjectLabelsFound, sep = "_")
x3$SortID2=paste(x3$SortID,".tif", sep = "")
ListDead=subset(x3,x3$Status=="Dead")
x3$SortID=paste(x3$Sci_PlateID,x3$Time,x3$TP,x3$Sci_WellID, "0","Epi-GFP16","0","0","1","BGs","MN", x3$ObjectLabelsFound, sep = "_")
x3$SortID2=paste(x3$SortID,".tif", sep = "")
ListDead=subset(x3,x3$Status=="Dead")
ListIntermediate=subset(x3,x3$Status=="Intermediate")
ListLive=subset(x3,x3$Status=="Live")
x3_1=subset(x3,x3$plate=="1")
x3_2=subset(x3,x3$plate=="2")
x3_3=subset(x3,x3$plate=="3")
ListDead_1=subset(x3_1,x3_1$Status=="Dead")
ListIntermediate_1=subset(x3_1,x3_1$Status=="Intermediate")
ListLive_1=subset(x3_1,x3_1$Status=="Live")
ListDead_2=subset(x3_2,x3_2$Status=="Dead")
ListIntermediate_2=subset(x3_2,x3_2$Status=="Intermediate")
ListLive_2=subset(x3_2,x3_2$Status=="Live")
ListDead_3=subset(x3_3,x3_3$Status=="Dead")
ListIntermediate_3=subset(x3_3,x3_3$Status=="Intermediate")
ListLive_3=subset(x3_3,x3_3$Status=="Live")
fromFolder1<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-1-SIFT/ObjectCrops"
fromFolder2<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-2-SIFT/ObjectCrops"
fromFolder3<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-3-SIFT/ObjectCrops"
t_1=paste(fromFolder1,ListLive_1$Sci_WellID, ListLive_1$SortID2, sep="/")
print(head(t_1))
View(x3)
x3$TP=paste(x3$Timepoint,"-0.0", sep="")
x3$Status=ifelse(x3$GEDIRatio<0.1, "Live", (ifelse(x3$GEDIRatio>0.2,"Dead","Intermediate")))
write.csv(surv.data,"All_H23.csv")
DS1ap <- ggplot(data=x3, aes(y=GEDIRatio, x=Timepoint, colour=Status))+
# scale_colour_gradient(limits=c(0, 10000), low="red", high="blue")+
geom_jitter(size=0.01)+
ylim(0,0.8)+
geom_hline(yintercept=0.2, linetype="dashed", color = "green")+
geom_hline(yintercept=0.1, linetype="dashed", color = "blue")+
#facet_wrap(~Timepoint)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"),
panel.background = element_rect(fill=NA, colour = "white"),
legend.background = element_rect(fill='white'))
DS1ap
x3$SortID=paste(x3$Sci_PlateID,x3$Time,x3$TP,x3$Sci_WellID, "0","Epi-GFP16","0","0","1","BGs","MN", x3$ObjectLabelsFound, sep = "_")
x3$SortID2=paste(x3$SortID,".tif", sep = "")
ListDead=subset(x3,x3$Status=="Dead")
ListIntermediate=subset(x3,x3$Status=="Intermediate")
ListLive=subset(x3,x3$Status=="Live")
x3_1=subset(x3,x3$plate=="1")
x3_2=subset(x3,x3$plate=="2")
x3_3=subset(x3,x3$plate=="3")
ListDead_1=subset(x3_1,x3_1$Status=="Dead")
ListIntermediate_1=subset(x3_1,x3_1$Status=="Intermediate")
ListLive_1=subset(x3_1,x3_1$Status=="Live")
ListDead_2=subset(x3_2,x3_2$Status=="Dead")
ListIntermediate_2=subset(x3_2,x3_2$Status=="Intermediate")
ListLive_2=subset(x3_2,x3_2$Status=="Live")
ListDead_3=subset(x3_3,x3_3$Status=="Dead")
ListIntermediate_3=subset(x3_3,x3_3$Status=="Intermediate")
ListLive_3=subset(x3_3,x3_3$Status=="Live")
fromFolder1<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-1-SIFT/ObjectCrops"
fromFolder2<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-2-SIFT/ObjectCrops"
fromFolder3<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-3-SIFT/ObjectCrops"
t_1=paste(fromFolder1,ListLive_1$Sci_WellID, ListLive_1$SortID2, sep="/")
print(head(t_1))
View(x3)
x3$Time=paste("T",x3$Timepoint, sep="")
x3$TP=paste(x3$Timepoint,"0.0-0", sep="")
View(x3)
x3=merge(x2, platelayout, by="Sci_WellID")
#For RGEDi-P2a-EGFP
x3$GEDIRatio<-((x3$PixelIntensityMean/x3$GFPPixelIntensityMean))
x3$Time=paste("T",x3$Timepoint, sep="")
x3$TP=paste(x3$Timepoint,".0", sep="")
View(x3)
x3$Status=ifelse(x3$GEDIRatio<0.1, "Live", (ifelse(x3$GEDIRatio>0.2,"Dead","Intermediate")))
write.csv(surv.data,"All_H23.csv")
DS1ap <- ggplot(data=x3, aes(y=GEDIRatio, x=Timepoint, colour=Status))+
# scale_colour_gradient(limits=c(0, 10000), low="red", high="blue")+
geom_jitter(size=0.01)+
ylim(0,0.8)+
geom_hline(yintercept=0.2, linetype="dashed", color = "green")+
geom_hline(yintercept=0.1, linetype="dashed", color = "blue")+
#facet_wrap(~Timepoint)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"),
panel.background = element_rect(fill=NA, colour = "white"),
legend.background = element_rect(fill='white'))
DS1ap
x3$SortID=paste(x3$Sci_PlateID,x3$Time,x3$TP,x3$Sci_WellID, "0","Epi-GFP16","0","0","1","BGs","MN", x3$ObjectLabelsFound, sep = "_")
x3$SortID2=paste(x3$SortID,".tif", sep = "")
ListDead=subset(x3,x3$Status=="Dead")
ListIntermediate=subset(x3,x3$Status=="Intermediate")
ListLive=subset(x3,x3$Status=="Live")
x3_1=subset(x3,x3$plate=="1")
x3_2=subset(x3,x3$plate=="2")
x3_3=subset(x3,x3$plate=="3")
ListDead_1=subset(x3_1,x3_1$Status=="Dead")
ListIntermediate_1=subset(x3_1,x3_1$Status=="Intermediate")
ListLive_1=subset(x3_1,x3_1$Status=="Live")
ListDead_2=subset(x3_2,x3_2$Status=="Dead")
ListIntermediate_2=subset(x3_2,x3_2$Status=="Intermediate")
ListLive_2=subset(x3_2,x3_2$Status=="Live")
ListDead_3=subset(x3_3,x3_3$Status=="Dead")
ListIntermediate_3=subset(x3_3,x3_3$Status=="Intermediate")
ListLive_3=subset(x3_3,x3_3$Status=="Live")
fromFolder1<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-1-SIFT/ObjectCrops"
fromFolder2<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-2-SIFT/ObjectCrops"
fromFolder3<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-3-SIFT/ObjectCrops"
t_1=paste(fromFolder1,ListLive_1$Sci_WellID, ListLive_1$SortID2, sep="/")
print(head(t_1))
x3=merge(x2, platelayout, by="Sci_WellID")
#For RGEDi-P2a-EGFP
x3$GEDIRatio<-((x3$PixelIntensityMean/x3$GFPPixelIntensityMean))
x3$Time=paste("T",x3$Timepoint, sep="")
x3$TP=paste(x3$Timepoint,".0-0", sep="")
x3$Status=ifelse(x3$GEDIRatio<0.1, "Live", (ifelse(x3$GEDIRatio>0.2,"Dead","Intermediate")))
write.csv(surv.data,"All_H23.csv")
DS1ap <- ggplot(data=x3, aes(y=GEDIRatio, x=Timepoint, colour=Status))+
# scale_colour_gradient(limits=c(0, 10000), low="red", high="blue")+
geom_jitter(size=0.01)+
ylim(0,0.8)+
geom_hline(yintercept=0.2, linetype="dashed", color = "green")+
geom_hline(yintercept=0.1, linetype="dashed", color = "blue")+
#facet_wrap(~Timepoint)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"),
panel.background = element_rect(fill=NA, colour = "white"),
legend.background = element_rect(fill='white'))
DS1ap
x3$SortID=paste(x3$Sci_PlateID,x3$Time,x3$TP,x3$Sci_WellID, "0","Epi-GFP16","0","0","1","BGs","MN", x3$ObjectLabelsFound, sep = "_")
x3$SortID2=paste(x3$SortID,".tif", sep = "")
ListDead=subset(x3,x3$Status=="Dead")
ListIntermediate=subset(x3,x3$Status=="Intermediate")
ListLive=subset(x3,x3$Status=="Live")
x3_1=subset(x3,x3$plate=="1")
x3_2=subset(x3,x3$plate=="2")
x3_3=subset(x3,x3$plate=="3")
ListDead_1=subset(x3_1,x3_1$Status=="Dead")
ListIntermediate_1=subset(x3_1,x3_1$Status=="Intermediate")
ListLive_1=subset(x3_1,x3_1$Status=="Live")
ListDead_2=subset(x3_2,x3_2$Status=="Dead")
ListIntermediate_2=subset(x3_2,x3_2$Status=="Intermediate")
ListLive_2=subset(x3_2,x3_2$Status=="Live")
ListDead_3=subset(x3_3,x3_3$Status=="Dead")
ListIntermediate_3=subset(x3_3,x3_3$Status=="Intermediate")
ListLive_3=subset(x3_3,x3_3$Status=="Live")
fromFolder1<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-1-SIFT/ObjectCrops"
fromFolder2<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-2-SIFT/ObjectCrops"
fromFolder3<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-3-SIFT/ObjectCrops"
t_1=paste(fromFolder1,ListLive_1$Sci_WellID, ListLive_1$SortID2, sep="/")
print(head(t_1))
setwd("/Volumes/data/robodata/Shijie/ML/NSCLC-H23")
options(max.print=100000)
test=paste(fromFolder1,ListLive_1$Sci_WellID, ListLive_1$SortID2, sep="/")
print(head(test))
test=paste(fromFolder2,ListIntermediate_2$Sci_WellID, ListIntermediate_2$SortID2, sep="/")
print(head(test))
x3$SortID=paste(x3$Sci_PlateID,x3$Time,x3$TP,x3$Sci_WellID, "0","Epi-GFP16","0","0","1","BGs","MN", x3$ObjectLabelsFound, sep = "_")
x3$SortID2=paste(x3$SortID,".tif", sep = "")
ListDead=subset(x3,x3$Status=="Dead")
ListIntermediate=subset(x3,x3$Status=="Intermediate")
ListLive=subset(x3,x3$Status=="Live")
x3_1=subset(x3,x3$plate=="1")
x3_2=subset(x3,x3$plate=="2")
x3_3=subset(x3,x3$plate=="3")
ListDead_1=subset(x3_1,x3_1$Status=="Dead")
ListIntermediate_1=subset(x3_1,x3_1$Status=="Intermediate")
ListLive_1=subset(x3_1,x3_1$Status=="Live")
ListDead_2=subset(x3_2,x3_2$Status=="Dead")
ListIntermediate_2=subset(x3_2,x3_2$Status=="Intermediate")
ListLive_2=subset(x3_2,x3_2$Status=="Live")
ListDead_3=subset(x3_3,x3_3$Status=="Dead")
ListIntermediate_3=subset(x3_3,x3_3$Status=="Intermediate")
ListLive_3=subset(x3_3,x3_3$Status=="Live")
fromFolder1<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-1-SIFT/ObjectCrops"
fromFolder2<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-2-SIFT/ObjectCrops"
fromFolder3<-"/Volumes/data/robodata/Shijie/Galaxy-temp-NSCLC_ML/GXYTMP-06042021-NSCLC-H23-3-SIFT/ObjectCrops"
t_1=paste(fromFolder1,ListLive_1$Sci_WellID, ListLive_1$SortID2, sep="/")
print(head(t_1))
setwd("/Volumes/data/robodata/Shijie/ML/NSCLC-H23")
options(max.print=100000)
test_2=paste(fromFolder2,ListIntermediate_2$Sci_WellID, ListIntermediate_2$SortID2, sep="/")
print(head(test_2))
toFolder<-("/Volumes/data/robodata/Shijie/ML/NSCLC-H23/LiveCrops")
file.copy(file.path(paste(fromFolder1,ListLive_1$Sci_WellID, ListLive_1$SortID2, sep="/")), toFolder, recursive = TRUE)
file.copy(file.path(paste(fromFolder2,ListLive_2$Sci_WellID, ListLive_2$SortID2, sep="/")), toFolder, recursive = TRUE)
file.copy(file.path(paste(fromFolder3,ListLive_3$Sci_WellID, ListLive_3$SortID2, sep="/")), toFolder, recursive = TRUE)
warnings()
View(x3)
View(surv.data1)
View(surv.data)
library(dplyr)
library(Seurat)
library(patchwork)
install.packages(Seurat)
install.packages(patchwork)
install.packages(patchwork)
install.packages('Seurat')
library(Seurat)
install.packages("Seurat")
setwd("~/UCB/Final_Project/Final_Project/Datasets/ml")
library(Seurat)
library(patchwork)
install.packages('patchwork')
install.packages("patchwork")
library(patchwork)
library(dplyr)
setwd("~/UCB/Final_Project/Final_Project/Datasets/ml")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = ".spx_Health_pivot")
# Load the PBMC dataset
data <- Read10X(data.dir = ".spx_Health_pivot")
# Load the PBMC dataset
data <- Read10X(data.dir = ".spx_Health_pivot")
# Load the PBMC dataset
data <- read.csv("spx_Health_pivot")
# Load the PBMC dataset
data <- read.csv("spx_Health_pivot.csv")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = data, project = "pbmc3k", min.cells = 3, min.features = 200)
library(Seurat)
library(patchwork)
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = data, project = "pbmc3k", min.cells = 3, min.features = 200)
View(pbmc)
pbmc.data <- Read10X(data.dir = ("spx_Health_pivot.csv")
data <- Read10X(data.dir = ("spx_Health_pivot.csv")
pbmc.data <- Read10X(data.dir = ("spx_Health_pivot.csv")
data <- read.csv("spx_Health_pivot.csv")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc.data <- Read10X(data.dir = ("spx_Health_pivot.csv")
data <- read.csv("spx_Health_pivot.csv")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
View(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
=
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
mydata <- scale(data) # standardize variables
View(data)
data <- data[-c(1,2), ]
View(data)
mydata <- scale(data) # standardize variables
rownames(data) <- data$X
data = select(data, -X)
mydata <- scale(data) # standardize variables
setwd("~/UCB/Final_Project/Final_Project/Datasets/ml")
# Prepare data
data <- read.csv("spx_Health_pivot.csv")
data <- data[-c(1,2), ]
rownames(data) <- data$X
data = select(data, -X)
mydata <- scale(data) # standardize variables
# Prepare data
data <- read.csv("spx_Health_pivot.csv")
data <- data[-c(1,2), ]
data$X = as.numeric(as.factor(data$X))
mydata <- scale(data) # standardize variables
prcomp(d)
prcomp(data)
data$X = as.numeric(as.factor(data$X))
# Prepare data
data <- read.csv("spx_Health_pivot.csv")
data <- data[-c(1,2), ]
rownames(data) <- data$X
data$X = as.numeric(as.factor(data$X))
data = select(data, -X)
data = as.numeric(as.factor(data))
mydata <- scale(data) # standardize variables
View(mydata)
prcomp(data)
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-Means Cluster Analysis
fit <- kmeans(mydata, 5) # 5 cluster solution
# get cluster means
aggregate(mydata,by=list(fit$cluster),FUN=mean)
# append cluster assignment
mydata <- data.frame(mydata, fit$cluster)
fit <- kmeans(mydata, 4) # 4 cluster solution
# get cluster means
aggregate(mydata,by=list(fit$cluster),FUN=mean)
# append cluster assignment
mydata <- data.frame(mydata, fit$cluster)
View(mydata)
# Ward Hierarchical Clustering
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
plot(fit) # display dendogram
groups <- cutree(fit, k=4) # cut tree into 5 clusters
# draw dendogram with red borders around the 5 clusters
rect.hclust(fit, k=5, border="red")
# Ward Hierarchical Clustering
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
plot(fit) # display dendogram
groups <- cutree(fit, k=4) # cut tree into 5 clusters
# draw dendogram with red borders around the 5 clusters
rect.hclust(fit, k=4, border="red")
# Model Based Clustering
library(mclust)
fit <- Mclust(mydata)
plot(fit) # plot results
summary(fit) # display the best model
# vary parameters for most readable graph
library(cluster)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
# Centroid Plot against 1st 2 discriminant functions
library(fpc)
plotcluster(mydata, fit$cluster)
library(fpc)
cluster.stats(d, fit1$cluster, fit2$cluster)
View(mydata)
# Prepare data
data <- read.csv("spx_Health_pivot.csv")
data <- data[-c(1,2), ]
rownames(data) <- data$X
data = select(data, -X)
prcomp(data)
set.seed(278613)
data_t <- kmeans(x=data, centers=3)
library(useful)
install.packages('useful')
library(useful)
set.seed(278613)
data_t <- kmeans(x=data, centers=3)
View(data)
plot(data, data = data)
plot(data)
plot(data$Close ~ data$Close.100)
library(keras)
install.packages('keras')
library(keras)
set.seed(278613)
data_t <- kmeans(x=data, centers=3)
kc<-kmeans(data,3)
kc<-kmeans(na.omit(data),4)
View(data)
km_cluster <- kmeans(na.omit(data), 3)
km_cluster
data <- na.omit(data)
set.seed(278613)
km_cluster <- kmeans(na.omit(data), 3)
km_cluster
library(factoextra)
k2 <- kmeans(data, centers = 3, nstart = 25)
# Prepare data
data <- read.csv("spx_Health_pivot.csv")
data <- data[-c(1,2), ]
rownames(data) <- data$X
z = select(data, -X)
a
means <- apply(z,2,mean)
sds <- apply(z,2,sd)
nor <- scale(z,center=means,scale=sds)
data = as.numeric(as.factor(data))
means <- apply(z,2,mean)
sds <- apply(z,2,sd)
nor <- scale(z,center=means,scale=sds)
prcomp(data)
data = as.numeric(as.factor(data))
# Prepare data
data <- read.csv("spx_Health_pivot.csv")
data <- data[-c(1,2), ]
rownames(data) <- data$X
z = select(data, -X)
data = as.numeric(as.factor(data))
# Prepare data
data <- read.csv("spx_Health_pivot.csv")
data <- data[-c(1,2), ]
rownames(data) <- data$X
z = select(data, -X)
View(z)
data = as.numeric(as.factor(data))
# Prepare data
data <- read.csv("spx_Health_pivot.csv")
data <- data[-c(1,2), ]
rownames(data) <- data$X
z = select(data, -X)
means <- apply(z,2,mean)
sds <- apply(z,2,sd)
nor <- scale(z,center=means,scale=sds)
data <- na.omit(data)
data <- na.omit(data)
z = select(data, -X)
set.seed(278613)
km_cluster <- kmeans(data, 3)
